{"ast":null,"code":"'use client';\n\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as React from 'react';\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  _s();\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\n_s(useGlobalId, \"x3Lc8abAdAPspKyjVNe81v4f1mI=\");\nconst maybeReactUseId = React['useId'.toString()];\n/**\r\n *\r\n * @example <div id={useId()} />\r\n * @param idOverride\r\n * @returns {string}\r\n */\nexport default function useId(idOverride) {\n  _s2();\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}\n_s2(useId, \"+U3eiRfVMajxVelR4S+2RUcln6A=\", false, function () {\n  return [useGlobalId];\n});","map":{"version":3,"names":["_s","$RefreshSig$","_s2","React","globalId","useGlobalId","idOverride","defaultId","setDefaultId","useState","id","useEffect","maybeReactUseId","toString","useId","undefined","reactId"],"sources":["C:/Users/thele/React-my-app/ui/src/node_modules/@mui/utils/esm/useId/useId.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nlet globalId = 0;\r\nfunction useGlobalId(idOverride) {\r\n  const [defaultId, setDefaultId] = React.useState(idOverride);\r\n  const id = idOverride || defaultId;\r\n  React.useEffect(() => {\r\n    if (defaultId == null) {\r\n      // Fallback to this default id when possible.\r\n      // Use the incrementing value for client-side rendering only.\r\n      // We can't use it server-side.\r\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\r\n      globalId += 1;\r\n      setDefaultId(`mui-${globalId}`);\r\n    }\r\n  }, [defaultId]);\r\n  return id;\r\n}\r\n\r\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\r\nconst maybeReactUseId = React['useId'.toString()];\r\n/**\r\n *\r\n * @example <div id={useId()} />\r\n * @param idOverride\r\n * @returns {string}\r\n */\r\nexport default function useId(idOverride) {\r\n  if (maybeReactUseId !== undefined) {\r\n    const reactId = maybeReactUseId();\r\n    return idOverride != null ? idOverride : reactId;\r\n  }\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\r\n  return useGlobalId(idOverride);\r\n}"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAEb,OAAO,KAAKE,KAAK,MAAM,OAAO;AAC9B,IAAIC,QAAQ,GAAG,CAAC;AAChB,SAASC,WAAWA,CAACC,UAAU,EAAE;EAAAN,EAAA;EAC/B,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAACH,UAAU,CAAC;EAC5D,MAAMI,EAAE,GAAGJ,UAAU,IAAIC,SAAS;EAClCJ,KAAK,CAACQ,SAAS,CAAC,MAAM;IACpB,IAAIJ,SAAS,IAAI,IAAI,EAAE;MACrB;MACA;MACA;MACA;MACAH,QAAQ,IAAI,CAAC;MACbI,YAAY,CAAC,OAAOJ,QAAQ,EAAE,CAAC;IACjC;EACF,CAAC,EAAE,CAACG,SAAS,CAAC,CAAC;EACf,OAAOG,EAAE;AACX;;AAEA;AAAAV,EAAA,CAhBSK,WAAW;AAiBpB,MAAMO,eAAe,GAAGT,KAAK,CAAC,OAAO,CAACU,QAAQ,CAAC,CAAC,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,KAAKA,CAACR,UAAU,EAAE;EAAAJ,GAAA;EACxC,IAAIU,eAAe,KAAKG,SAAS,EAAE;IACjC,MAAMC,OAAO,GAAGJ,eAAe,CAAC,CAAC;IACjC,OAAON,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAGU,OAAO;EAClD;EACA;EACA,OAAOX,WAAW,CAACC,UAAU,CAAC;AAChC;AAACJ,GAAA,CAPuBY,KAAK;EAAA,QAMpBT,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}